#!/bin/bash
# (C) 2014, Yann E. MORIN <yann.morin.1998@free.fr>
# License: GPLv2, see LICENSE.GPLv2 in this repository
myname="${0##*/}"
set -e

#----------------------------------------------------------------------------
do_error() {
    local fmt="${1}"
    shift

    printf "%s: " "${myname}" >&2
    printf "${fmt}" "${@}" >&2
    exit 1
}

trace() {
    local fmt="${1}"
    shift

    printf "%s: " "${myname}" >&2
    printf "${fmt}" "${@}"  >&2
}

debug() { :; }
if [ -n "${GIT_DEBUG}" ]; then
    debug() {
        trace "${@}"
    }
fi

#----------------------------------------------------------------------------
main() {
    local target="${1}"
    local branch_regexp="${2}"
    local branch ret current log
    local -a branches

    if [ ${#} -ne 2 ]; then
        do_error "usage: %s <new-base> <branch-name>\n" "${myname}"
    fi

    debug "checking if target exists\n"
    if ! git rev-parse --verify "${target}" >/dev/null 2>&1; then
        do_error "unknown target '%s'\n" "${target}"
    fi

    current="$( git branch |sed -r -e '/^\* (.*)$/!d; s//\1/;' )"

    branches=( $( git branch             \
                  |sed -r -e 's/^..//'   \
                  |grep -E "${branch_regexp}" \
                )
             )

    # Before we can remerge merge-branches, we need to rebase all
    # non-merge branches
    for branch in "${branches[@]}"; do
        log="$( git show --pretty='format:%s' "${branch}" )"
        # If branch is a merge, do not rebase it
        if [[ "${log}" =~ ^Merge\ branches ]]; then
            trace "not rebasing merge-branch '%s'\n" "${branch}"
            continue
        fi
        trace "rebasing branch '%s' onto '%s'\n" "${branch}" "${target}"
        if ! git rebase-and-retag "${target}" "${branch}"; then
            ret=${?}
            printf "\n\nFailed to rebase: %s\n" "${branch}"
            exit ${ret}
        fi
    done

    # Now all non-merge branches have been rebased, we can re-create the
    # merge-branches
    for branch in "${branches[@]}"; do
        log="$( git show --pretty='format:%s' "${branch}" )"
        # If branch is not a merge, do not remerge it
        if [[ ! "${log}" =~ ^Merge\ branches ]]; then
            trace "not remerging non-merge branch '%s'\n" "${branch}"
            continue
        fi
        trace "remerging branch '%s'\n" "${branch}"
        if ! git remerge-and-retag "${target}" "${branch}"; then
            ret=${?}
            printf "\n\nFailed to remerge: %s\n" "${branch}"
            exit ${ret}
        fi
    done

    git checkout "${current}"
}

#----------------------------------------------------------------------------
main "$@"
